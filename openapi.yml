openapi: 3.0.0
info:
  title: Wiki & Notes API
  description: ""
  version: 0.0.0

paths:
  /auth/internal/token:
    post:
      tags:
        - Authentication
      summary: "Get a token for authentication"
      requestBody: { $ref: "#/components/requestBodies/Login" }
      responses:
        201:
          description: "Successful authentication, token has been created"
          content:
            text/plain:
              schema:
                type: string
        401:
          description: "Provided details are not valid"
  /users:
    post:
      tags:
        - Users
      summary: "Create a new user"
      requestBody: { $ref: "#/components/requestBodies/CreateUser" }
      responses:
        201:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
  /users/me:
    get:
      tags:
        - Users
      summary: "Get the current user currently signed in"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        401:
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - authInternal: []
  /shelves:
    post:
      tags:
        - Shelves
      summary: "Create a new shelf"
      requestBody: { $ref: "#/components/requestBodies/CreateShelf" }
      responses:
        201:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Shelf" }
      security:
        - authInternal: []
    get:
      tags:
        - Shelves
      summary: "Get all shelves"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Shelf"
  /shelves/{shelfId}:
    parameters:
      - name: shelfId
        schema:
          type: number
        in: path
        required: true
    get:
      tags:
        - Shelves
      summary: "Get a shelf by it's id"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Shelf" }
    delete:
      tags:
        - Shelves
      summary: "Remove a shelf"
      responses:
        204:
          description: ""
      security:
        - authInternal: []
  /shelves/{shelfId}/books:
    parameters:
      - name: shelfId
        schema:
          type: number
        in: path
        required: true
    get:
      tags:
        - Shelves
      summary: "Get all books on shelf"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books:
    post:
      tags:
        - Books
      summary: "Create a new book"
      requestBody: { $ref: "#/components/requestBodies/CreateBook" }
      responses:
        201:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Book" }
      security:
        - authInternal: []
  /books/{bookId}:
    parameters:
      - name: bookId
        schema:
          type: number
        in: path
        required: true
    get:
      tags:
        - Books
      summary: "Get a book by it's id"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Book" }
    delete:
      tags:
        - Books
      summary: "Remove a book"
      responses:
        204:
          description: ""
      security:
        - authInternal: []
  /books/{bookId}/pages:
    parameters:
      - name: bookId
        schema:
          type: number
        in: path
        required: true
    get:
      tags:
        - Books
      summary: "Get all pages from book"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
  /pages:
    post:
      tags:
        - Pages
      summary: "Create a new page"
      requestBody: { $ref: "#/components/requestBodies/CreatePage" }
      responses:
        201:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Page" }
      security:
        - authInternal: []
  /pages/{pageId}:
    parameters:
      - name: pageId
        schema:
          type: number
        in: path
        required: true
    get:
      tags:
        - Pages
      summary: "Get a page by it's id"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Page" }
    delete:
      tags:
        - Pages
      summary: "Remove a page"
      responses:
        204:
          description: ""
      security:
        - authInternal: []
  /pages/{pageId}/content:
    parameters:
      - name: pageId
        schema:
          type: number
        in: path
        required: true
    post:
      tags:
        - Pages
      summary: "Set a page's content"
      requestBody:
        content:
          text/markdown:
            schema:
              type: string
      responses:
        204:
          description: "Page content has been set"
      security:
        - authInternal: []
    get:
      tags:
        - Pages
      summary: "Get a page's content"
      responses:
        200:
          description: "The page's content"
          content:
            text/markdown:
              schema:
                type: string
  /utils/convert-url:
    post:
      tags:
        - Utils
      summary: "Convert frontend url into the id"
      requestBody: { $ref: "#/components/requestBodies/UrlTitleParts" }
      responses:
        200:
          description: ""
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ConvertedIds" }

components:
  securitySchemes:
    authInternal:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Base:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
    User:
      allOf:
        - $ref: "#/components/schemas/Base"
        - type: object
          properties:
            username:
              type: string
    Shelf:
      allOf:
        - $ref: "#/components/schemas/Base"
        - type: object
          properties:
            title:
              type: string
            systemTitle:
              type: string
            ownerId:
              type: number
    Book:
      allOf:
        - $ref: "#/components/schemas/Base"
        - type: object
          properties:
            shelfId:
              type: integer
            title:
              type: string
            systemTitle:
              type: string
    Page:
      allOf:
        - $ref: "#/components/schemas/Base"
        - type: object
          properties:
            bookId:
              type: integer
            title:
              type: string
            systemTitle:
              type: string
    ConvertedIds:
      type: object
      required:
        - shelfId
      properties:
        shelfId:
          type: integer
        bookId:
          type: integer
        PageId:
          type: integer
    Login:
      type: object
      required:
        - username
      properties:
        username:
          type: string
    CreateUser:
      type: object
      required:
        - username
      properties:
        username:
          type: string
    CreateShelf:
      type: object
      required:
        - ownerId
        - title
        - systemTitle
      properties:
        ownerId:
          type: number
        title:
          type: string
        systemTitle:
          type: string
    CreateBook:
      type: object
      required:
        - shelfId
        - title
        - systemTitle
      properties:
        shelfId:
          type: number
        title:
          type: string
        systemTitle:
          type: string
    CreatePage:
      type: object
      required:
        - bookId
        - title
        - systemTitle
      properties:
        bookId:
          type: number
        title:
          type: string
        systemTitle:
          type: string
    UrlTitleParts:
      type: object
      required:
        - shelfTitle
      properties:
        shelfTitle:
          type: string
        bookTitle:
          type: string
        PageTitle:
          type: string

  requestBodies:
    Login:
      content:
        application/json:
          schema:
            allOf: [{ $ref: "#/components/schemas/Login" }]
    CreateUser:
      content:
        application/json:
          schema:
            allOf: [{ $ref: "#/components/schemas/CreateUser" }]
      description: ""
      required: true
    CreateShelf:
      content:
        application/json:
          schema:
            allOf: [{ $ref: "#/components/schemas/CreateShelf" }]
      description: ""
      required: true
    CreateBook:
      content:
        application/json:
          schema:
            allOf: [{ $ref: "#/components/schemas/CreateBook" }]
      description: ""
      required: true
    CreatePage:
      content:
        application/json:
          schema:
            allOf: [{ $ref: "#/components/schemas/CreatePage" }]
      description: ""
      required: true
    UrlTitleParts:
      content:
        application/json:
          schema:
            allOf: [{ $ref: "#/components/schemas/UrlTitleParts" }]
      description: ""
      required: true

  responses:
    UnauthorizedError:
      description: "Valid authentication is required to access content"
      # TODO add WWW-Authenticate
    ForbiddenError:
      description: "Rights for accessing content have not been given."
